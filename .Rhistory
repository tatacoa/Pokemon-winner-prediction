Principal Component ", col =" brown3 ")
# PVE can also be computed like this:
summary(pr.out)$importance[2,]
par(mfrow=c(1,2))
plot(pve, type="o", ylab="PVE", xlab="Principal Component",
col =" blue ")
plot(cumsum(pve), type="o", ylab="Cumulative PVE", xlab="
Principal Component ", col =" brown3 ")
# PAM
# scale genes
sd.data=scale(nci.data)
par(mfrow=c(1,3))
data.dist=dist(sd.data)
data.dist=dist(sd.data) ; data.dist
plot(hclust(data.dist), labels=nci.labs, main="Complete
Linkage", xlab="", sub="",ylab="")
plot(hclust(data.dist, method="average"), labels=nci.labs,
main="Average Linkage", xlab="", sub="",ylab="")
plot(hclust(data.dist, method="single"), labels=nci.labs,
main="Single Linkage", xlab="", sub="",ylab="")
par(mfrow=c(3,1))
data.dist=dist(sd.data) ; data.dist
plot(hclust(data.dist), labels=nci.labs, main="Complete
Linkage", xlab="", sub="",ylab="")
plot(hclust(data.dist, method="average"), labels=nci.labs,
main="Average Linkage", xlab="", sub="",ylab="")
plot(hclust(data.dist, method="single"), labels=nci.labs,
main="Single Linkage", xlab="", sub="",ylab="")
hc.out=hclust(dist(sd.data))
hc.clusters=cutree(hc.out,4)
table(hc.clusters,nci.labs)
par(mfrow=c(1,1))
plot(hc.out, labels=nci.labs)
abline(h=139, col="red")
cutree(hc.out,4)
hc.out
# The same but using kmeans
km.out=kmeans(sd.data, 4, nstart=20)
km.clusters=km.out$cluster
table(km.clusters ,hc.clusters )
hc.out=hclust(dist(pr.out$x[,1:5]))
plot(hc.out, labels=nci.labs, main="Hier. Clust. on First
Five Score Vectors ")
table(cutree(hc.out,4), nci.labs)
find.package("cluster")
library(cluster)
find.package("ISLR")
install.packages("ISLR")
update.packages()
help(USArrests)
summary(USArrests)
head(USArrests)
colnames(USArrests)
row.names(USArrests)<-state.abb
pairs(USArrests)
# PAM clustering with 4 clusters
pam.out<-pam(USArrests,k=4)
clusplot(pam.out,labels=3)
# silhouette width over 0.4 is good
?silhouette
sp<-silhouette(pam.out); sp
plot(sp,col=1:4)
mean(sp[,"sil_width"])
abline(v=mean(sp[,"sil_width"]))
# The mean silhouette width can be used to assess which is the best number of clusters
avesw.vec<-rep(NA,7)
for(i in 2:7)
avesw.vec[i]<-mean(silhouette(pam(USArrests,k=i))[,"sil_width"])
plot(1:7,avesw.vec,type="b",ylim=c(0,0.6))
avesw.vec # cual tiene el largest mean silhouette width? 2???
# Rerun the PAM algorithm with the optimal number of clusters
pam.out<-pam(scale(USArrests),k=2); pam.out
clusplot(pam.out,labels=3)
sp<-silhouette(pam.out)
plot(sp,col=1:2)
abline(v=mean(sp[,"sil_width"]))
# The mean silhouette width can be used to assess which is the best number of clusters
avesw.vec<-rep(NA,7)
for(i in 2:7)
avesw.vec[i]<-mean(silhouette(pam(USArrests,k=i))[,"sil_width"])
plot(1:7,avesw.vec,type="b",ylim=c(0,0.6))
avesw.vec # cual tiene el largest mean silhouette width? 2???
# Rerun the PAM algorithm with the optimal number of clusters
pam.out<-pam(scale(USArrests),k=2); pam.out
# Rerun the PAM algorithm with the optimal number of clusters
pam.out<-pam(scale(USArrests),k=5); pam.out
clusplot(pam.out,labels=3)
sp<-silhouette(pam.out)
plot(sp,col=1:2)
abline(v=mean(sp[,"sil_width"]))
# Compare the optimal PAM clustering with the K-Means result
km.out<-kmeans(scale(USArrests),centers=2,nstart=20); km.out # se debe hacer antes prcomp? no
table(km.out$cluster,pam.out$clustering)
km.out$cluster == pam.out$clustering
# silhouette using kmeans as input
sp<-silhouette(km.out$cluster, dist(scale(USArrests))) # dont forget to scale
plot(sp,col=1:2)
decathlon <- read.csv2("Zehnkampf2017Hamburg.csv",
stringsAsFactors = FALSE, fileEncoding = "ISO-8859-1", header = TRUE, sep = ";")[-c(1:3,seq(10,28,2))]
# silhouette width over 0.4 is good
?silhouette
sp<-silhouette(pam.out); sp
plot(sp,col=1:4)
# PAM clustering with 4 clusters
pam.out<-pam(USArrests,k=4)
clusplot(pam.out,labels=3)
# silhouette width over 0.4 is good
?silhouette
sp<-silhouette(pam.out); sp
plot(sp,col=1:4)
mean(sp[,"sil_width"])
abline(v=mean(sp[,"sil_width"]))
# PAM clustering with 4 clusters
pam.out<-pam(USArrests,k=5)
clusplot(pam.out,labels=3)
# silhouette width over 0.4 is good
?silhouette
sp<-silhouette(pam.out); sp
plot(sp,col=1:4)
# PAM clustering with 4 clusters
pam.out<-pam(USArrests,k=5)
clusplot(pam.out,labels=5)
#Libraries
library(ggplot2)
library(dplyr)
library(gridExtra)
#install.packages('corrplot')
library(corrplot)
#install.packages('caret')
library(caret)
#install.packages('ggthemes')
library(ggthemes)
library(RColorBrewer)
#install.packages('fmsb')
library(fmsb) # radarchart
#install.packages('rpart.plot')
library(rpart.plot)
#install.packages('ROCR')
library(ROCR)
##### DATA IMPORT #####
# Load data
setwd("Pokemon-winner-prediction")
pokemon <- read.csv('data/pokemon.csv')
##### DATA IMPORT #####
# Load data
setwd("Pokemon-winner-prediction")
setwd("~/Documents/Pokemon-winner-prediction")
pokemon <- read.csv('data/pokemon.csv')
##### DATA MANIPULATION #####
levels(pokemon$Name)[levels(pokemon$Name)==""] <- "Primeape" # pokemon name was not defined
#pokemon[63,2] <- factor(63, labels = "Primeape")
names <- pokemon[,c(1,2)]; head(names) # join id with pokemon name
colSums(is.na(names))
colnames(names)
head(pokemon)
#Map the figths table from id to pokemon name
fights.name <- data.frame(lapply(fights, function(x) names$Name[match(x,names$X.)]))
fights <- read.csv('data/combats')
##### DATA MANIPULATION #####
levels(pokemon$Name)[levels(pokemon$Name)==""] <- "Primeape" # pokemon name was not defined
#pokemon[63,2] <- factor(63, labels = "Primeape")
names <- pokemon[,c(1,2)]; head(names) # join id with pokemon name
colSums(is.na(names))
colnames(names)
head(pokemon)
#Map the figths table from id to pokemon name
fights.name <- data.frame(lapply(fights, function(x) names$Name[match(x,names$X.)]))
head(fights.name)
#Map the figths table from id to pokemon name
fights.name <- data.frame(lapply(fights, function(x) names$Name[match(x,names$X.)]))
fights <- read.csv('data/combats')
fights <- read.csv('data/combats.csv')
##### DATA MANIPULATION #####
levels(pokemon$Name)[levels(pokemon$Name)==""] <- "Primeape" # pokemon name was not defined
#pokemon[63,2] <- factor(63, labels = "Primeape")
names <- pokemon[,c(1,2)]; head(names) # join id with pokemon name
colSums(is.na(names))
colnames(names)
head(pokemon)
#Map the figths table from id to pokemon name
fights.name <- data.frame(lapply(fights, function(x) names$Name[match(x,names$X.)]))
head(fights.name)
sapply(fights.name, function(x) length(unique(x))) # only 784 of 800 pokemon fought
head(fights.name)
# Load Libraries
library(ISLR)
library(glmnet)
install.library('glmnet')
install.packages('glmnet')
#install caret package
install.packages('caret')
install.packages("caret")
#load package
library(caret)
# Load Data
feats <- read.csv('./data/features.csv')
# Load Libraries
library(ISLR)
#install.packages('glmnet')
library(glmnet)
library(dplyr)
library(tidyr)
library(Metrics)
#install.packages('caret')
library(caret)
trainIndex = createDataPartition(feats$win_ratio,
p=0.8, list=FALSE, times=1)
trainIndex = createDataPartition(feats$win_ratio,
p=0.8, times=1)
trainIndex = createDataPartition(feats$win_ratio,
p=0.8, list=FALSE, times=1)
colSums(is.na(feats))
which(feats$win_ratio) == NULL
which(feats$win_ratio == NULL)
which(feats$win_ratio == NULL)
which(feats$win_ratio == NaN)
feats$win_ratio
which(feats$win_ratio = NA)
which(feats$win_ratio == NA)
feats[,which(feats$win_ratio)== NA]
feats[,which(feats$win_ratio == NA)]
feats[, is.na(feats$win_ratio)]
feats[, which(is.na(feats$win_ratio))]
which(is.na(feats$win_ratio))
feats[-(feats[, which(is.na(feats$win_ratio))]),]
no_figth <- feats[, which(is.na(feats$win_ratio))]
feats[-no_figth,]
no_figth
which(is.na(feats$win_ratio))
feadts[which(is.na(feats$win_ratio))] ,]
feats[which(is.na(feats$win_ratio))] ,]
feats[which(is.na(feats$win_ratio))]]
feats[which(is.na(feats$win_ratio)),]
feats2 <- feats[which(is.na(feats$win_ratio)),]
#split train test data
trainIndex = createDataPartition(feats$win_ratio,
p=0.8, list=FALSE, times=1)
#split train test data
trainIndex = createDataPartition(feats2$win_ratio,
p=0.8, list=FALSE, times=1)
# Load Data
feats <- read.csv('./data/features.csv')
# remove pokemons that never won
feats2 <- feats[-(which(is.na(feats$win_ratio))),]
#split train test data
trainIndex = createDataPartition(feats2$win_ratio,
p=0.8, list=FALSE, times=1)
train = mydata[trainIndex,]
train = feats2[trainIndex,]
test = feats2[-trainIndex,]
# create Target variable
y <- train$win_ratio
# Model Ridge
CARET.TRAIN.CTRL = trainControl(method="repeatedcv",
number=5,
repeats=5,
verboseIter=FALSE)
model_ridge <- train(x=X_train,y=y,
method="glmnet",
metric="RMSE",
maximize=FALSE,
trControl=CARET.TRAIN.CTRL,
tuneGrid=expand.grid(alpha=0, # Ridge regression
lambda=lambdas))
model_ridge <- train(x=train,y=y,
method="glmnet",
metric="RMSE",
maximize=FALSE,
trControl=CARET.TRAIN.CTRL,
tuneGrid=expand.grid(alpha=0, # Ridge regression
lambda=lambdas))
model_ridge <- train(x=train,y=y,
method="glmnet",
metric="RMSE",
maximize=FALSE,
trControl=CARET.TRAIN.CTRL,
tuneGrid=expand.grid(alpha=0, # Ridge regression
lambda=lambdas))
model_ridge <- train(x=train,y=y,
method="glmnet",
metric="RMSE",
maximize=FALSE,
trControl=CARET.TRAIN.CTRL,
tuneGrid=expand.grid(alpha=0, # Ridge regression
lambda=lambdas))
#install.packages('glmnet')
library(glmnet)
install.packages('glmnet')
library(glmnet)
library(glmnet)
install.packages('glmnet')
# Load Data
feats <- read.csv('./data/features.csv')
colSums(is.na(feats))
# remove pokemons that never won
feats2 <- feats[-(which(is.na(feats$win_ratio))),]
dim(feats)
sapply(names(feats),function(x){class(feats[[x]])})
names(feature_classes[feature_classes != "character"])
# select categorical and numerical features
feature_classes <- sapply(names(feats),function(x){class(feats[[x]])})
names(feature_classes[feature_classes != "character"])
feats <- feats[,c(3:10)]; head(feats)
feats
# Load Data
feats <- read.csv('./data/features.csv')
# remove pokemons that never won
feats2 <- feats[-(which(is.na(feats$win_ratio))),]
dim(feats2)
feats2 <- feats[,c(3:18)]; head(feats)
feats2 <- feats2[,c(3:18)]; head(feats2)
feats2[,c(3:18)]
dim(feats2)
# Load Data
feats <- read.csv('./data/features.csv')
colSums(is.na(feats))
# remove pokemons that never won
feats2 <- feats[-(which(is.na(feats$win_ratio))),]
dim(feats2)
feats2 <- feats2[,c(3:18)]; head(feats2)
dim(feats2)
# select categorical and numerical features
feature_classes <- sapply(names(feats2),function(x){class(feats[[x]])})
feature_classes
numeric_feats <-names(feature_classes[feature_classes != "character"])
numeric_feats
feature_classes
numeric_feats <-names(feats2[feature_classes != "character"])
numeric_feats
names(feats2[feature_classes == "character"]
)
names(feature_classes[feature_classes == "character"])
feature_classes
names(feats2[feature_classes != "character"] &
feats2[feature_classes != "factor"])
)
names(feats2[feature_classes != "character" &
feature_classes != "factor"])
numeric_feats <-names(feats2[feature_classes != "character" &
feature_classes != "factor"])
# get names of categorical features
categorical_feats <- names(feats2[feature_classes == "character" &
feature_classes == "factor"])
categorical_feats
names(feats2[feature_classes == "character" &
feature_classes == "factor"])
feature_classes == "character"
feats2[feature_classes == "character"]
sapply(names(feats2),function(x){class(feats[[x]])})
sapply(names(feats2),function(x){class(feats[[x]])})
# select categorical and numerical features
feature_classes <- sapply(names(feats2),function(x){class(feats[[x]])})
feature_classes
numeric_feats <-names(feats2[feature_classes != "character" &
feature_classes != "factor"])
numeric_feats
# get names of categorical features
categorical_feats <- names(feats2[feature_classes == "character" &
feature_classes == "factor"])
categorical_feats
# select categorical and numerical features
feature_classes <- sapply(names(feats2),function(x){class(feats[[x]])})
feature_classes
names(feats2[feature_classes == "character" &
feature_classes == "factor"])
names(feats2[feature_classes == "character")
names(feats2[feature_classes == "character"])
# select categorical and numerical features
feature_classes <- sapply(names(feats2),function(x){class(feats[[x]])})
feature_classes
# get names of categorical features
categorical_feats <- names(feats2[feature_classes == "character" |
feature_classes == "factor"])
categorical_feats
# Load Data
feats <- read.csv('./data/features.csv')
colSums(is.na(feats))
# remove pokemons that never won
feats2 <- feats[-(which(is.na(feats$win_ratio))),]
dim(feats2)
feats2 <- feats2[,c(4:18)]; head(feats2);
dim(feats2)
# select categorical and numerical features
feature_classes <- sapply(names(feats2),function(x){class(feats[[x]])})
feature_classes
numeric_feats <-names(feats2[feature_classes != "character" &
feature_classes != "factor"])
numeric_feats
# get names of categorical features
categorical_feats <- names(feats2[feature_classes == "character" |
feature_classes == "factor"])
categorical_feats
# use caret dummyVars function for hot one encoding for categorical features
dummies <- dummyVars(~.,feats2[categorical_feats])
dummies
categorical_1_hot <- predict(dummies,feats2[categorical_feats])
categorical_1_hot
categorical_1_hot[is.na(categorical_1_hot)] <- 0  #for any level that was NA, set to zero
categorical_1_hot
final_data <- cbind(feats2[numeric_feats],categorical_1_hot)
write.csv(final_data, file="./data/Model_data.csv")
View(final_data)
View(pokemon)
setwd("~/Documents/Pokemon-winner-prediction")
pokemon <- read.csv('./data/pokemon.csv')
fights <- read.csv('./data/combats.csv')
setwd("~/Documents/Pokemon-winner-prediction")
pokemon <- read.csv('./data/pokemon.csv')
fights <- read.csv('./data/combats.csv')
##### DATA MANIPULATION #####
levels(pokemon$Name)[levels(pokemon$Name)==""] <- "Primeape" # pokemon name was not defined
#pokemon[63,2] <- factor(63, labels = "Primeape")
names <- pokemon[,c(1,2)]; head(names) # join id with pokemon name
colSums(is.na(names))
colnames(names)
head(pokemon)
#Map the figths table from id to pokemon name
fights.name <- data.frame(lapply(fights, function(x) names$Name[match(x,names$X.)]))
head(fights.name)
sapply(fights.name, function(x) length(unique(x))) # only 784 of 800 pokemon fought
#Libraries
library(ggplot2)
library(dplyr)
library(gridExtra)
#install.packages('corrplot')
library(corrplot)
#install.packages('caret')
library(caret)
#install.packages('ggthemes')
library(ggthemes)
library(RColorBrewer)
#install.packages('fmsb')
library(fmsb) # radarchart
#install.packages('rpart.plot')
library(rpart.plot)
#install.packages('ROCR')
library(ROCR)
##### DATA IMPORT #####
# Load data
setwd("Pokemon-winner-prediction")
##### EXPLORATY DATA ANALYSIS #####
# data exploration
dim(pokemon)
names(pokemon)
head(pokemon)
colSums(is.na(pokemon)) # no missing values
table(pokemon$Type.1)
summary(pokemon)
knitr::opts_chunk$set(echo = TRUE, fig.align = "center")
print('Pokemon Generation')
table(pokemon$Generation)
summary(table(pokemon$Generation))
barplot(table(pokemon$Generation), col=heat.colors(6), main = 'Pokemon Genetation', xlab = 'Generation', ylab = 'Count')
print('Pokemon Generation')
table(pokemon$Generation)
summary(pokemon$Generation)
barplot(table(pokemon$Generation), col=heat.colors(6), main = 'Pokemon Genetation', xlab = 'Generation', ylab = 'Count')
print('Pokemon Generation')
table(pokemon$Generation)
barplot(table(pokemon$Generation), col=heat.colors(6), main = 'Pokemon Genetation', xlab = 'Generation', ylab = 'Count')
# Load required Libraries
library(ggplot2)
library(dplyr)
library(gridExtra)
library(corrplot)
library(caret)
library(ggthemes)
library(RColorBrewer)
library(fmsb)
library(rpart.plot)
library(ROCR)
library(ggplot2)
print('Pokemon Generation')
table(pokemon$Generation)
barplot(table(pokemon$Generation), col=heat.colors(6), main = 'Pokemon Genetation', xlab = 'Generation', ylab = 'Count')
print('Pokemon Generation')
table(pokemon$Generation)
barplot(table(pokemon$Generation), col=heat.colors(6), main = 'Pokemon Genetation', xlab = 'Generation', ylab = 'Count')
print('Pokemon Generation')
table(pokemon$Generation)
barplot(table(pokemon$Generation), col=heat.colors(6), main = 'Pokemon Genetation', xlab = 'Generation', ylab = 'Count')
# data exploration
dim(pokemon)
names(pokemon)
head(pokemon)
colSums(is.na(pokemon))
summary(pokemon)
knitr::opts_chunk$set(echo = TRUE, fig.align = "center", fig.width=12, fig.height=8)
print('Pokemon Type 1')
sort(table(pokemon$Type.1))
par(las=2)
barplot(sort(table(pokemon$Type.1)),
col = heat.colors(length(unique(pokemon$Type.1))),
main = 'Type 1 Pokemon',
xlab = 'Type 1', ylab = 'Count')
par(las=2)
print('Pokemon Type 2')
sort(table(pokemon$Type.2))
barplot(sort(table(pokemon$Type.2)),
col = heat.colors(length(unique(pokemon$Type.2))),
main = 'Type 2 Pokemon', ylab = 'Count')
print('Winner Table')
wins <- group_by(fights, Winner)
summarise(sort(wins), count = n())
win_table$Winner
# Load Data
feats <- read.csv('./data/features.csv')
colSums(is.na(feats))
# remove pokemons that never won
feats2 <- feats[-(which(is.na(feats$win_ratio))),]
dim(feats2)
colnames(feats2)
